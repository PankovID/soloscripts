a = [1,2,3,4,5,6,7,8,9]
b = [a[:], a[:], a[:], a[:], a[:], a[:], a[:], a[:], a[:]]
posibb = [b[:], b[:], b[:], b[:], b[:], b[:], b[:], b[:], b[:]]

posib = [
        [[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]],
        [[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]],
        [[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]],
        [[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]],
        [[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]],
        [[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]],
        [[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]],
        [[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]],
        [[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]]
    ]

matrix = [
[	[9],	[ ],	[ ],	[1],	[ ],	[ ],	[ ],	[ ],	[5]	],
[	[ ],	[ ],	[5],	[ ],	[9],	[ ],	[2],	[ ],	[1]	],
[	[8],	[ ],	[ ],	[6],	[4],	[ ],	[ ],	[ ],	[ ]	],
[	[ ],	[ ],	[ ],	[ ],	[8],	[ ],	[ ],	[ ],	[ ]	],
[	[ ],	[ ],	[ ],	[7],	[ ],	[ ],	[ ],	[ ],	[ ]	],
[	[ ],	[ ],	[ ],	[ ],	[2],	[6],	[ ],	[ ],	[9]	],
[	[2],	[ ],	[ ],	[3],	[ ],	[ ],	[ ],	[ ],	[6]	],
[	[ ],	[ ],	[ ],	[2],	[ ],	[ ],	[9],	[ ],	[ ]	],
[	[ ],	[ ],	[1],	[9],	[ ],	[4],	[5],	[7],	[ ]	]
    ]



# Убираем известные значения из списков

answ = matrix[:]

for lll in range(7):

    for i in range(0,9):
        for j in range(0,9):
            vall = answ[i][j]
            if vall != []:
                posib[i][j] = vall
                for x in range(0,9):
                    if x != j:
                        try:
                            posib[i][x].remove(vall[0])
                        except:
                            pass
                    if x != i:
                        try:
                            posib[x][j].remove(vall[0])
                        except:
                            pass
                #квадраты
                kek = (i // 3) * 10 + (j // 3)
                for x in range(0,9):
                    for y in range(0,9):
                        if not(x == i and y == j):
                            if (x // 3) * 10 + (y // 3) == kek:
                                try:
                                    # print(i, j, x, y, vall[0])
                                    posib[x][y].remove(vall[0])
                                except:
                                    pass


    # ищем ответы, которые теперь очевидны

    for i in range(0,9):
        for j in range(0,9):
            vall = posib[i][j]
            if len(vall) == 1:
                if answ[i][j] == []:
                    answ[i][j] = posib[i][j]
                    print(i, j, posib[i][j])
            if len(posib[i][j]) == 0:
                print('Error!')

    # Ищем те варианты, которые больше не встречаются в строке|столбце|квадрате

    for i in range(0, 9):
        for j in range(0, 9):
            kek = (i // 3) * 10 + (j // 3)
            if answ[i][j] == []:
                for posval in posib[i][j]:
                    is_unique_val_i = 1
                    is_unique_val_j = 1
                    is_unique_val_x = 1
                    for x in range(0,9):
                        if x != j:
                            if posval in posib[i][x]:
                                # print('here col!', i, j, x, posval)
                                is_unique_val_i = 0

                        if x != i:
                            if posval in posib[x][j]:
                                # print('here row!', i, j, x, posval)
                                is_unique_val_j = 0

                    for x in range(0, 9):
                        for y in range(0, 9):
                            if not(x == i and y == j):
                                if (x // 3) * 10 + (y // 3) == kek:
                                    if posval in posib[x][y]:
                                        # print('here sqr!', i, j, x, y, posval)
                                        is_unique_val_x = 0

                    if max(is_unique_val_x, is_unique_val_i, is_unique_val_j) == 1:
                        print('value: ', posval, ' here: ', i, j, )
                        answ[i][j] = [posval]

    print('next loop')
#
# End for loop
#

# ff = [1, 2, 3]
# ff.remove(1)

#
# Вывод ответов
#

for row in answ:
    print(row)

print('__'*40)
# Конец вывода ответов


#
#  Красивый вывод подсказок
#

max_len = [0,0,0,0,0,0,0,0,0]

for row in posib:
    for x in range(len(row)):
        item = row[x]
        max_len[x] = max(len(item), max_len[x])

for row in posib:
    for x in range(len(row)):
        item = row[x]
        print(str(item) + '   '*(max_len[x] - len(item)), end= '')
        print(' | ', end= '')
    print('')

# Конец
